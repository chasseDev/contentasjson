<?php
/**
 * @file
 * Modules that sets up a menucallback to get data in JSON format (preferably by AJAX)
 *
 * @author Antwan van der Mooren <antwan.van.der.mooren@dpdk.nl>
 */

/**
 * Help hook to add custom help text to help pages
 *
 * @param string $path
 * @param array $arg
 * @return string
 */
function contentasjson_help($path, $arg) {
  switch ($path) {
    case "admin/help#contentasjson" :
      //Load information out of HELP_HTML.txt file (same text as on project on drupal.org)
      //Also, same text as README.txt but HTML formatted
      $help_text = file_get_contents( drupal_get_path( "module", "contentasjson" ) . "/HELP_HTML.txt" );
      return nl2br( $help_text );
  }
}

/**
 * Permission Hook to give the application access to this module
 *
 * @return array
 */
function contentasjson_permission() {
  return array(
    'access contentasjson content' => array(
      'title' => t( 'Access Content as JSON content' ),
      'description' => t( 'Use the contentasjson menu callbacks to retrieve data in JSON format' )
    )
  );
}

/**
 * Menu hook to add custom menus to Drupal environment
 *
 * @return array
 */
function contentasjson_menu() {
  $items ['contentasjson/%/%'] = array(
    'page callback' => 'contentasjson_get_data',
    'page arguments' => array(
      1,
      2
    ),
    'access arguments' => array(
      'access contentasjson content'
    ),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Get a node by a menucallback and return as JSON
 *
 * @param string $type The type of content (node, comment, taxonomy_term, taxonomy_vocabulary, custom_data)
 * @param int $nid     ID of content to GET, give 0 as default
 */
function contentasjson_get_data($type, $id) {
  switch ($type) {
    case "menu" :
      $data = _contentasjson_main_menu( $id );
      $json = json_encode($data);
      echo $json;
      exit();
      break;

    case "home_page" :
      $data = _contentasjson_home_page_carousel( $id );
      $json = '{"html":'.json_encode($data).'}';
      echo $json;
      exit();
      break;

    case "node" :
      $data = _contentasjson_get_node( $id );
      break;

    case "comment" :
      $data = _contentasjson_get_comment( $id );
      break;

    case "taxonomy_term" :
      $data = _contentasjson_get_taxonomy_term( $id );
      break;

    case "taxonomy_vocabulary" :
      $data = _contentasjson_get_taxonomy_vocabulary( $id );
      break;

    case "custom_data" :
      $data = _contentasjson_get_custom_data();
      break;

    default :
      $data = _contentasjson_get_error_message_type( $type );
      break;
  }

  //If false (no data object returned), generate return message
  $data = ($data == FALSE ? _contentasjson_get_error_message_id( $id ) : $data);

  $dom = new DOMDocument();

  // HTML of page
	$dom->loadHTML($data['body'][0]['#markup']);
	$html = $dom->saveHTML($dom->getElementsByTagName('div')->item(0));
  // Remove the Add Content buttons from the markup
  // $html = preg_replace('#<button title="Add new element into current element area." type="button" class="control add ax-btn ax-btn-default center-block add-content-btn azexo-editor"> <i class="fa fa-plus-square-o"></i> Add Content </button>#', '', $html);
  $html .= '<div class="text-center">
    <button type="button" class="btn btn-primary" id="scrollToTop"><span class="glyphicon glyphicon-chevron-up"></span></button>
  </div>';

  // Title of Page
  $page_title = $data['body']['#object']->title;
	$json = '{"html":'.json_encode($html).', "page":"'.$page_title.'"}';

	echo $json;
}

/**
 * A custom function written by Carter Cochran
 *
 * @return main menu item (array)
 */
function _contentasjson_main_menu($id) {

  $sql = "SELECT n.nid AS nid, n.title AS title, n.small_icon AS small_icon, n.home_icon AS home_icon FROM node n JOIN menu_links m ON m.link_path = CONCAT('node/', n.nid) ORDER BY m.weight";

  $result = db_query($sql);

  $menu = $result->fetchAll();

  return $menu;
}

/**
 * A custom function written by Carter Cochran
 *
 * @return main menu item (array)
 */
function _contentasjson_home_page_carousel($id) {
  // $id is the node type
  // $node_type = "home_page_carousel";

  $query=db_select('node','n');
  $query->condition('n.type', $id, '=');
  $query->fields('n', array('nid'));
  $result = $query->execute();
  $node_id = $result->fetchCol();
  $nid = $node_id[0];

  $node_load = node_load($nid);
  $node_view = node_view($node_load, 'full');

  return $node_view['body'][0]['#markup'];
}

/**
 * Get a node by ID and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the node to custom format
 * @example  function mymodule_contentasjson_get_node($node) {
 *             $node_array = array();
 *             $node_array['id'] = $node->nid;
 *             $node_array['title'] = $node->title;
 *
 *             return $node_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _contentasjson_get_node($id) {
  $node = node_load( $id );
  $node_view = node_view($node, 'full');

  //Check permissions
  if (node_access( 'view', $node ) != TRUE) {
    return _contentasjson_get_error_message_permission( 'node', $id );
  }

  //Make hook available
  $node_array = module_invoke_all( "contentasjson_get_node", $node );
  if (is_array( $node_array ) && ! empty( $node_array )) {
    $node = $node_array;
  }

  return $node_view;
}

/**
 * Get a comment by ID and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the comment to custom format
 * @example  function mymodule_contentasjson_get_comment($comment) {
 *             $comment_array = array();
 *             $comment_array['id'] = $comment->cid;
 *             $comment_array['name'] = $comment->name;
 *
 *             return $comment_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _contentasjson_get_comment($id) {
  $comment = comment_load( $id );

  //Check permissions
  if (user_access( 'access comments' ) != TRUE) {
    return _contentasjson_get_error_message_permission( 'comment', $id );
  }

  //Make hook available
  $comment_array = module_invoke_all( "contentasjson_get_comment", $comment );
  if (is_array( $comment_array ) && ! empty( $comment_array )) {
    $comment = $comment_array;
  }

  return $comment;
}

/**
 * Get a taxonomy_term by ID and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the taxonomy_term to custom format
 * @example  function mymodule_contentasjson_get_taxonomy_term($taxonomy_term) {
 *             $taxonomy_term_array = array();
 *             $taxonomy_term_array['id'] = $taxonomy_term->tid;
 *             $taxonomy_term_array['name'] = $taxonomy_term->name;
 *
 *             return $taxonomy_term_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _contentasjson_get_taxonomy_term($id) {
  $taxonomy_term = taxonomy_term_load( $id );

  //Make hook available
  $taxonomy_term_array = module_invoke_all( "contentasjson_get_taxonomy_term", $taxonomy_term );
  if (is_array( $taxonomy_term_array ) && ! empty( $taxonomy_term_array )) {
    $taxonomy_term = $taxonomy_term_array;
  }

  return $taxonomy_term;
}

/**
 * Get a taxonomy_vocabulary by ID and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the taxonomy_vocabulary to custom format
 * @example  function mymodule_contentasjson_get_taxonomy_vocabulary($taxonomy_vocabulary) {
 *             $taxonomy_vocabulary_array = array();
 *             $taxonomy_vocabulary_array['id'] = $taxonomy_vocabulary->vid;
 *             $taxonomy_vocabulary_array['name'] = $taxonomy_vocabulary->name;
 *
 *             return $taxonomy_vocabulary_array;
 *           }
 * @param int $id
 * @return object|array
 */
function _contentasjson_get_taxonomy_vocabulary($id) {
  $taxonomy_vocabulary = taxonomy_vocabulary_load( $id );

  //Make hook available
  $taxonomy_vocabulary_array = module_invoke_all( "contentasjson_get_taxonomy_vocabulary", $taxonomy_vocabulary );
  if (is_array( $taxonomy_vocabulary_array ) && ! empty( $taxonomy_vocabulary_array )) {
    $taxonomy_vocabulary = $taxonomy_vocabulary_array;
  }

  return $taxonomy_vocabulary;
}

/**
 * Get a custom_data by ID and return (modified by hook) data
 *
 * @uses     Drupal Hook to modify the custom_data to custom format
 * @example  function mymodule_contentasjson_get_custom_data($custom_data) {
 *             $custom_data_array = array();
 *             $custom_data_array['id'] = 0;
 *             $custom_data_array['title'] = "example";
 *
 *             return $custom_data_array;
 *           }
 * @return FALSE|array
 */
function _contentasjson_get_custom_data() {
  $custom_data = FALSE;

  //Make hook available
  $custom_data_array = module_invoke_all( "contentasjson_get_custom_data", $custom_data );
  if (is_array( $custom_data_array ) && ! empty( $custom_data_array )) {
    $custom_data = $custom_data_array;
  }

  return $custom_data;
}

/**
 * Return an error message when the user doesn't have any permissions for the content
 *
 * @param string $type
 * @return array
 */
function _contentasjson_get_error_message_permission($type, $id) {
  return array(
    "error" => t( "You don't have any permissions to view this content. The arguments were (@type) and (@id)", array(
      "@type" => $type,
      "@id" => $id
    ) )
  );
}

/**
 * Return an error message when the wrong type has been passed through
 *
 * @param string $type
 * @return array
 */
function _contentasjson_get_error_message_type($type) {
  return array(
    "error" => t( "No valid content type given to contentasjson callback. The argument was (@type)", array(
      "@type" => $type
    ) )
  );
}

/**
 * Return an error message when data is FALSE (probably because of wrong id)
 *
 * @param int $id
 * @return array
 */
function _contentasjson_get_error_message_id($id) {
  return array(
    "error" => t( "The given ID didn't contain any return data. The argument was (@id)", array(
      "@id" => $id
    ) )
  );
}
